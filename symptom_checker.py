"""
‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (Simple Symptom Checker)
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á AI ‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏±‡∏ò‡∏¢‡∏°
"""

class SymptomChecker:
    def __init__(self):
        # ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢)
        self.diseases = {
            "‡πÑ‡∏Ç‡πâ‡∏´‡∏ß‡∏±‡∏î": {
                "symptoms": ["‡πÑ‡∏Ç‡πâ", "‡πÑ‡∏≠", "‡∏ô‡πâ‡∏≥‡∏°‡∏π‡∏Å‡πÑ‡∏´‡∏•", "‡πÄ‡∏à‡πá‡∏ö‡∏Ñ‡∏≠", "‡∏õ‡∏ß‡∏î‡∏®‡∏µ‡∏£‡∏©‡∏∞"],
                "severity": "‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢",
                "advice": "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏≤‡∏Å‡πÜ ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡∏•‡∏î‡πÑ‡∏Ç‡πâ ‡∏´‡∏≤‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô 3 ‡∏ß‡∏±‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå"
            },
            "‡πÑ‡∏Ç‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å": {
                "symptoms": ["‡πÑ‡∏Ç‡πâ‡∏™‡∏π‡∏á", "‡∏õ‡∏ß‡∏î‡∏®‡∏µ‡∏£‡∏©‡∏∞", "‡∏õ‡∏ß‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", "‡∏ú‡∏∑‡πà‡∏ô‡πÅ‡∏î‡∏á", "‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å‡∏á‡πà‡∏≤‡∏¢"],
                "severity": "‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á",
                "advice": "‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ! ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏≤‡∏Å‡πÜ ‡∏´‡πâ‡∏≤‡∏°‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡πÅ‡∏≠‡∏™‡πÑ‡∏û‡∏£‡∏¥‡∏ô"
            },
            "‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ": {
                "symptoms": ["‡∏à‡∏≤‡∏°", "‡∏ô‡πâ‡∏≥‡∏°‡∏π‡∏Å‡πÑ‡∏´‡∏•", "‡∏Ñ‡∏±‡∏ô‡∏ï‡∏≤", "‡∏Ñ‡∏±‡∏ô‡∏à‡∏°‡∏π‡∏Å"],
                "severity": "‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢",
                "advice": "‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏û‡πâ ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡πÅ‡∏Å‡πâ‡πÅ‡∏û‡πâ ‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏∑‡∏≠‡∏ö‡πà‡∏≠‡∏¢‡πÜ"
            },
            "‡πÑ‡∏Ç‡πâ‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏ç‡πà": {
                "symptoms": ["‡πÑ‡∏Ç‡πâ‡∏™‡∏π‡∏á", "‡∏´‡∏ô‡∏≤‡∏ß‡∏™‡∏±‡πà‡∏ô", "‡∏õ‡∏ß‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", "‡∏≠‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏•‡∏µ‡∏¢", "‡πÑ‡∏≠‡πÅ‡∏´‡πâ‡∏á"],
                "severity": "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
                "advice": "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡πÜ ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥ ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡∏•‡∏î‡πÑ‡∏Ç‡πâ ‡∏™‡∏ß‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å ‡∏´‡∏≤‡∏Å‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏≥‡∏ö‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå"
            },
            "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏©": {
                "symptoms": ["‡∏ó‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢", "‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô", "‡∏õ‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á", "‡πÑ‡∏Ç‡πâ", "‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏™‡πâ"],
                "severity": "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
                "advice": "‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡πÅ‡∏£‡πà ‡∏á‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏Å‡πÜ ‡∏´‡∏≤‡∏Å‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô‡∏°‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏õ‡∏ô‡πÉ‡∏´‡πâ‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå"
            }
        }
    
    def check_symptoms(self, user_symptoms):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"""
        possible_diseases = []
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏£‡∏Ñ
        for disease, info in self.diseases.items():
            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            matching_symptoms = []
            for symptom in user_symptoms:
                if symptom in info["symptoms"]:
                    matching_symptoms.append(symptom)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
            if matching_symptoms:
                match_percentage = (len(matching_symptoms) / len(info["symptoms"])) * 100
                possible_diseases.append({
                    "disease": disease,
                    "percentage": match_percentage,
                    "matching_symptoms": matching_symptoms,
                    "severity": info["severity"],
                    "advice": info["advice"]
                })
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
        possible_diseases.sort(key=lambda x: x["percentage"], reverse=True)
        
        return possible_diseases
    
    def display_results(self, results):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        if not results:
            print("\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            print("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥")
            return
        
        print("\n" + "="*50)
        print("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô")
        print("="*50)
        
        for i, result in enumerate(results[:3], 1):  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
            print(f"\nüîç ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà {i}:")
            print(f"   ‡πÇ‡∏£‡∏Ñ: {result['disease']}")
            print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ: {result['percentage']:.1f}%")
            print(f"   ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô: {', '.join(result['matching_symptoms'])}")
            print(f"   ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á: {result['severity']}")
            print(f"   ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {result['advice']}")
        
        print("\n" + "="*50)
        print("‚ö†Ô∏è  ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô")
        print("    ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥")
        print("="*50)

def main():
    print("\nüè• ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô")
    print("    (AI for Medicine - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô)")
    print("-" * 50)
    
    checker = SymptomChecker()
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    all_symptoms = set()
    for info in checker.diseases.values():
        all_symptoms.update(info["symptoms"])
    
    print("\nüìã ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å:")
    for i, symptom in enumerate(sorted(all_symptoms), 1):
        print(f"   {i}. {symptom}")
    
    # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    print("\nüìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    print("   (‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter, ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏à‡∏ö' ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à)")
    
    user_symptoms = []
    while True:
        symptom = input("   ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: ").strip()
        if symptom.lower() == '‡∏à‡∏ö':
            break
        if symptom and symptom in all_symptoms:
            user_symptoms.append(symptom)
            print(f"   ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: {symptom}")
        elif symptom:
            print(f"   ‚ùì ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: {symptom}")
    
    if user_symptoms:
        print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: {', '.join(user_symptoms)}")
        results = checker.check_symptoms(user_symptoms)
        checker.display_results(results)
    else:
        print("\n‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡πÜ")

if __name__ == "__main__":
    main()