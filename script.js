// AI for Medicine - Interactive JavaScript

// Smooth scrolling for navigation
function scrollToSection(sectionId) {
    const element = document.getElementById(sectionId);
    if (element) {
        element.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
        });
    }
}

// Statistics counter animation
function animateCounter(element, target) {
    const increment = target / 100;
    let current = 0;
    
    const timer = setInterval(() => {
        current += increment;
        element.textContent = Math.floor(current);
        
        if (current >= target) {
            element.textContent = target;
            clearInterval(timer);
        }
    }, 20);
}

// Initialize statistics animation when in view
function initStatsAnimation() {
    const stats = document.querySelectorAll('.stat-number');
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const target = parseInt(entry.target.dataset.target);
                animateCounter(entry.target, target);
                observer.unobserve(entry.target);
            }
        });
    });
    
    stats.forEach(stat => observer.observe(stat));
}

// Tab functionality for demos
function initDemoTabs() {
    const tabBtns = document.querySelectorAll('.tab-btn');
    const demoContents = document.querySelectorAll('.demo-content');
    
    tabBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            const targetTab = btn.dataset.tab;
            
            // Remove active class from all tabs and contents
            tabBtns.forEach(b => b.classList.remove('active'));
            demoContents.forEach(content => content.classList.remove('active'));
            
            // Add active class to clicked tab and corresponding content
            btn.classList.add('active');
            document.getElementById(targetTab).classList.add('active');
        });
    });
}

// Code tab functionality
function initCodeTabs() {
    const codeTabs = document.querySelectorAll('.code-tab-btn');
    const codeContents = document.querySelectorAll('.code-content');
    
    codeTabs.forEach(btn => {
        btn.addEventListener('click', () => {
            const targetCode = btn.dataset.code;
            
            // Remove active class from all tabs and contents
            codeTabs.forEach(b => b.classList.remove('active'));
            codeContents.forEach(content => content.classList.remove('active'));
            
            // Add active class to clicked tab and corresponding content
            btn.classList.add('active');
            document.getElementById(targetCode + '-code').classList.add('active');
        });
    });
}

// Symptom Checker Demo
function checkSymptoms() {
    const checkboxes = document.querySelectorAll('.symptom-checkboxes input[type="checkbox"]:checked');
    const selectedSymptoms = Array.from(checkboxes).map(cb => cb.value);
    const resultDiv = document.getElementById('symptom-result');
    
    if (selectedSymptoms.length === 0) {
        resultDiv.innerHTML = '<p style="color: #e74c3c; text-align: center;">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏≠‡∏¢‡πà‡∏≤‡∏á</p>';
        return;
    }
    
    // Show loading
    resultDiv.innerHTML = '<div style="text-align: center;"><div class="loading"></div> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏£...</div>';
    
    // Simulate API call with timeout
    setTimeout(() => {
        const results = analyzeSymptoms(selectedSymptoms);
        displaySymptomResults(results);
    }, 2000);
}

function analyzeSymptoms(symptoms) {
    const diseases = {
        '‡πÑ‡∏Ç‡πâ‡∏´‡∏ß‡∏±‡∏î': {
            symptoms: ['‡πÑ‡∏Ç‡πâ', '‡πÑ‡∏≠', '‡∏ô‡πâ‡∏≥‡∏°‡∏π‡∏Å‡πÑ‡∏´‡∏•', '‡πÄ‡∏à‡πá‡∏ö‡∏Ñ‡∏≠', '‡∏õ‡∏ß‡∏î‡∏®‡∏µ‡∏£‡∏©‡∏∞'],
            severity: '‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢',
            advice: '‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏≤‡∏Å‡πÜ ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡∏•‡∏î‡πÑ‡∏Ç‡πâ'
        },
        '‡πÑ‡∏Ç‡πâ‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏ç‡πà': {
            symptoms: ['‡πÑ‡∏Ç‡πâ', '‡∏õ‡∏ß‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠', '‡∏õ‡∏ß‡∏î‡∏®‡∏µ‡∏£‡∏©‡∏∞', '‡πÑ‡∏≠'],
            severity: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
            advice: '‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏Å ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥ ‡∏´‡∏≤‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå'
        },
        '‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ': {
            symptoms: ['‡∏ô‡πâ‡∏≥‡∏°‡∏π‡∏Å‡πÑ‡∏´‡∏•', '‡∏à‡∏≤‡∏°'],
            severity: '‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢',
            advice: '‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏û‡πâ ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡πÅ‡∏Å‡πâ‡πÅ‡∏û‡πâ'
        }
    };
    
    const results = [];
    
    Object.keys(diseases).forEach(disease => {
        const diseaseSymptoms = diseases[disease].symptoms;
        const matchingSymptoms = symptoms.filter(s => diseaseSymptoms.includes(s));
        
        if (matchingSymptoms.length > 0) {
            const percentage = Math.round((matchingSymptoms.length / diseaseSymptoms.length) * 100);
            results.push({
                disease,
                percentage,
                matchingSymptoms,
                severity: diseases[disease].severity,
                advice: diseases[disease].advice
            });
        }
    });
    
    return results.sort((a, b) => b.percentage - a.percentage);
}

function displaySymptomResults(results) {
    const resultDiv = document.getElementById('symptom-result');
    
    if (results.length === 0) {
        resultDiv.innerHTML = '<p style="text-align: center; color: #7f8c8d;">‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>';
        return;
    }
    
    let html = '<h4 style="margin-bottom: 1rem; color: #2c5aa0;">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:</h4>';
    
    results.slice(0, 3).forEach((result, index) => {
        html += `
            <div class="result-card">
                <div class="result-title">üîç ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà ${index + 1}: ${result.disease}</div>
                <div class="result-percentage">${result.percentage}% ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ</div>
                <p><strong>‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô:</strong> ${result.matchingSymptoms.join(', ')}</p>
                <p><strong>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á:</strong> ${result.severity}</p>
                <p><strong>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> ${result.advice}</p>
            </div>
        `;
    });
    
    html += '<div style="margin-top: 1rem; padding: 1rem; background: #fff3cd; border-radius: 8px; border-left: 4px solid #ffc107;"><strong>‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:</strong> ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</div>';
    
    resultDiv.innerHTML = html;
    resultDiv.classList.add('fade-in');
}

// BMI Calculator Demo
function calculateBMI() {
    const weight = parseFloat(document.getElementById('weight').value);
    const height = parseFloat(document.getElementById('height').value);
    const resultDiv = document.getElementById('bmi-result');
    
    if (!weight || !height || weight <= 0 || height <= 0) {
        resultDiv.innerHTML = '<p style="color: #e74c3c; text-align: center;">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</p>';
        return;
    }
    
    // Show loading
    resultDiv.innerHTML = '<div style="text-align: center;"><div class="loading"></div> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI...</div>';
    
    setTimeout(() => {
        const bmi = weight / Math.pow(height / 100, 2);
        const category = getBMICategory(bmi);
        const advice = getBMIAdvice(category);
        
        displayBMIResult(bmi, category, advice, weight, height);
    }, 1500);
}

function getBMICategory(bmi) {
    if (bmi < 18.5) return '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå';
    if (bmi < 25) return '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥';
    if (bmi < 30) return '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô';
    if (bmi < 35) return '‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 1';
    if (bmi < 40) return '‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 2';
    return '‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 3';
}

function getBMIAdvice(category) {
    const advice = {
        '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå': '‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö 5 ‡∏´‡∏°‡∏π‡πà',
        '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥': '‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
        '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô': '‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
        '‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 1': '‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á ‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ô‡∏±‡∏Å‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£',
        '‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 2': '‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å',
        '‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 3': '‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤'
    };
    return advice[category] || '‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå';
}

function displayBMIResult(bmi, category, advice, weight, height) {
    const resultDiv = document.getElementById('bmi-result');
    const idealWeight = 22 * Math.pow(height / 100, 2);
    const weightDiff = weight - idealWeight;
    
    let categoryColor = '#27ae60';
    if (category.includes('‡πÄ‡∏Å‡∏¥‡∏ô') || category.includes('‡∏≠‡πâ‡∏ß‡∏ô')) {
        categoryColor = '#e74c3c';
    } else if (category.includes('‡∏ô‡πâ‡∏≠‡∏¢')) {
        categoryColor = '#f39c12';
    }
    
    const html = `
        <h4 style="margin-bottom: 1rem; color: #2c5aa0;">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI:</h4>
        <div class="result-card">
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1rem;">
                <div>
                    <strong>‡∏Ñ‡πà‡∏≤ BMI:</strong> ${bmi.toFixed(1)}
                </div>
                <div>
                    <strong>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</strong> <span style="color: ${categoryColor}; font-weight: bold;">${category}</span>
                </div>
            </div>
            <div style="margin-bottom: 1rem;">
                <strong>‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°:</strong> ${idealWeight.toFixed(1)} ‡∏Å‡∏Å.
                ${weightDiff > 0 ? 
                    `<br><span style="color: #e74c3c;">‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô: +${weightDiff.toFixed(1)} ‡∏Å‡∏Å.</span>` : 
                    weightDiff < 0 ? 
                    `<br><span style="color: #f39c12;">‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå: ${weightDiff.toFixed(1)} ‡∏Å‡∏Å.</span>` :
                    `<br><span style="color: #27ae60;">‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‚úÖ</span>`
                }
            </div>
            <div style="background: #f8f9fa; padding: 1rem; border-radius: 8px; border-left: 4px solid #2c5aa0;">
                <strong>üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> ${advice}
            </div>
        </div>
    `;
    
    resultDiv.innerHTML = html;
    resultDiv.classList.add('fade-in');
}

// Heart Rate Analyzer Demo
function analyzeHeartRate() {
    const heartRate = parseInt(document.getElementById('heart-rate-input').value);
    const age = parseInt(document.getElementById('age-input').value);
    const resultDiv = document.getElementById('heart-rate-result');
    
    if (!heartRate || !age || heartRate <= 0 || age <= 0 || heartRate > 300 || age > 120) {
        resultDiv.innerHTML = '<p style="color: #e74c3c; text-align: center;">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à 1-300, ‡∏≠‡∏≤‡∏¢‡∏∏ 1-120)</p>';
        return;
    }
    
    // Show loading
    resultDiv.innerHTML = '<div style="text-align: center;"><div class="loading"></div> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...</div>';
    
    setTimeout(() => {
        const analysis = analyzeHeartRateData(heartRate, age);
        displayHeartRateResult(analysis);
    }, 1500);
}

function analyzeHeartRateData(heartRate, age) {
    const maxHR = 220 - age;
    const targetLow = Math.round(maxHR * 0.5);
    const targetHigh = Math.round(maxHR * 0.85);
    
    let status, color, advice;
    
    if (heartRate < 50) {
        status = '‡∏ä‡πâ‡∏≤‡∏°‡∏≤‡∏Å';
        color = '#e74c3c';
        advice = '‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏±‡∏ß‡πÉ‡∏à ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ';
    } else if (heartRate < 60) {
        status = '‡∏ä‡πâ‡∏≤';
        color = '#f39c12';
        advice = '‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥';
    } else if (heartRate <= 100) {
        status = '‡∏õ‡∏Å‡∏ï‡∏¥';
        color = '#27ae60';
        advice = '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏õ‡∏Å‡∏ï‡∏¥‡∏î‡∏µ';
    } else if (heartRate <= 120) {
        status = '‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢';
        color = '#f39c12';
        advice = '‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î ‡∏Å‡∏≤‡πÅ‡∏ü ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢';
    } else if (heartRate <= 150) {
        status = '‡πÄ‡∏£‡πá‡∏ß';
        color = '#e74c3c';
        advice = '‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô';
    } else {
        status = '‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å';
        color = '#e74c3c';
        advice = '‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢';
    }
    
    return {
        heartRate,
        age,
        status,
        color,
        advice,
        maxHR,
        targetLow,
        targetHigh
    };
}

function displayHeartRateResult(analysis) {
    const resultDiv = document.getElementById('heart-rate-result');
    
    const html = `
        <h4 style="margin-bottom: 1rem; color: #2c5aa0;">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏±‡∏ß‡πÉ‡∏à:</h4>
        <div class="result-card">
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1rem;">
                <div>
                    <strong>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à:</strong> ${analysis.heartRate} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ
                </div>
                <div>
                    <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> <span style="color: ${analysis.color}; font-weight: bold;">${analysis.status}</span>
                </div>
            </div>
            <div style="margin-bottom: 1rem;">
                <strong>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:</strong> ${analysis.maxHR} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ<br>
                <strong>‡πÇ‡∏ã‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢:</strong> ${analysis.targetLow}-${analysis.targetHigh} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ
            </div>
            <div style="background: #f8f9fa; padding: 1rem; border-radius: 8px; border-left: 4px solid ${analysis.color};">
                <strong>üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> ${analysis.advice}
            </div>
        </div>
        <div style="margin-top: 1rem; padding: 1rem; background: #fff3cd; border-radius: 8px; border-left: 4px solid #ffc107;">
            <strong>üìä ‡πÇ‡∏ã‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢:</strong><br>
            ‚Ä¢ ‡πÇ‡∏ã‡∏ô‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π: ${Math.round(analysis.maxHR * 0.5)}-${Math.round(analysis.maxHR * 0.6)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ<br>
            ‚Ä¢ ‡πÇ‡∏ã‡∏ô‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡πÑ‡∏Ç‡∏°‡∏±‡∏ô: ${Math.round(analysis.maxHR * 0.6)}-${Math.round(analysis.maxHR * 0.7)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ<br>
            ‚Ä¢ ‡πÇ‡∏ã‡∏ô‡πÅ‡∏≠‡πÇ‡∏£‡∏ö‡∏¥‡∏Å: ${Math.round(analysis.maxHR * 0.7)}-${Math.round(analysis.maxHR * 0.8)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ
        </div>
    `;
    
    resultDiv.innerHTML = html;
    resultDiv.classList.add('fade-in');
}

// Drug Information Demo (OpenFDA API simulation)
async function searchDrug() {
    const drugName = document.getElementById('drug-name').value.trim();
    const resultDiv = document.getElementById('drug-result');
    
    if (!drugName) {
        resultDiv.innerHTML = '<p style="color: #e74c3c; text-align: center;">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤</p>';
        return;
    }
    
    // Show loading
    resultDiv.innerHTML = '<div style="text-align: center;"><div class="loading"></div> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤...</div>';
    
    try {
        // Simulate API call to OpenFDA
        setTimeout(() => {
            const drugInfo = simulateDrugSearch(drugName.toLowerCase());
            displayDrugResult(drugInfo, drugName);
        }, 2000);
        
    } catch (error) {
        resultDiv.innerHTML = '<p style="color: #e74c3c; text-align: center;">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</p>';
    }
}

function simulateDrugSearch(drugName) {
    const drugs = {
        'aspirin': {
            brandName: 'Aspirin',
            genericName: 'Acetylsalicylic acid',
            manufacturer: 'Various',
            purpose: 'Pain reliever, fever reducer, anti-inflammatory',
            dosage: '325-650 mg every 4-6 hours',
            warnings: 'May cause stomach bleeding. Consult doctor if pregnant.',
            sideEffects: 'Stomach upset, heartburn, drowsiness'
        },
        'paracetamol': {
            brandName: 'Tylenol',
            genericName: 'Acetaminophen',
            manufacturer: 'Various',
            purpose: 'Pain reliever, fever reducer',
            dosage: '500-1000 mg every 4-6 hours',
            warnings: 'Do not exceed 4000mg per day. Liver damage risk.',
            sideEffects: 'Rare when used as directed'
        },
        'ibuprofen': {
            brandName: 'Advil, Motrin',
            genericName: 'Ibuprofen',
            manufacturer: 'Various',
            purpose: 'Pain reliever, fever reducer, anti-inflammatory',
            dosage: '200-400 mg every 4-6 hours',
            warnings: 'May increase risk of heart attack or stroke.',
            sideEffects: 'Stomach upset, heartburn, dizziness'
        }
    };
    
    return drugs[drugName] || null;
}

function displayDrugResult(drugInfo, searchTerm) {
    const resultDiv = document.getElementById('drug-result');
    
    if (!drugInfo) {
        resultDiv.innerHTML = `
            <div style="text-align: center; color: #7f8c8d;">
                <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤ "${searchTerm}" ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á</p>
                <p style="font-size: 0.9rem; margin-top: 1rem;">‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: aspirin, paracetamol, ibuprofen</p>
            </div>
        `;
        return;
    }
    
    const html = `
        <h4 style="margin-bottom: 1rem; color: #2c5aa0;">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤:</h4>
        <div class="result-card">
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1rem;">
                <div>
                    <strong>‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤:</strong> ${drugInfo.brandName}
                </div>
                <div>
                    <strong>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç:</strong> ${drugInfo.genericName}
                </div>
            </div>
            <div style="margin-bottom: 1rem;">
                <strong>‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï:</strong> ${drugInfo.manufacturer}<br>
                <strong>‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå:</strong> ${drugInfo.purpose}<br>
                <strong>‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤:</strong> ${drugInfo.dosage}
            </div>
            <div style="background: #fff3cd; padding: 1rem; border-radius: 8px; border-left: 4px solid #ffc107; margin-bottom: 1rem;">
                <strong>‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:</strong> ${drugInfo.warnings}
            </div>
            <div style="background: #f8d7da; padding: 1rem; border-radius: 8px; border-left: 4px solid #e74c3c;">
                <strong>üî¥ ‡∏ú‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á:</strong> ${drugInfo.sideEffects}
            </div>
        </div>
        <div style="margin-top: 1rem; padding: 1rem; background: #d4edda; border-radius: 8px; border-left: 4px solid #27ae60;">
            <strong>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏à‡∏£‡∏¥‡∏á
        </div>
    `;
    
    resultDiv.innerHTML = html;
    resultDiv.classList.add('fade-in');
}

// Modal functionality
function openDemo(category) {
    const modal = document.getElementById('demo-modal');
    const modalBody = document.getElementById('modal-body');
    
    const demoContent = {
        'imaging': {
            title: '‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå',
            content: `
                <h3>AI ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå</h3>
                <div style="margin: 2rem 0;">
                    <h4>‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á AI:</h4>
                    <ul style="margin-left: 2rem; margin-top: 1rem;">
                        <li>‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û X-ray ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥</li>
                        <li>‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡∏õ‡∏≠‡∏î‡∏à‡∏≤‡∏Å CT Scan</li>
                        <li>‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå MRI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ‡∏™‡∏°‡∏≠‡∏á</li>
                        <li>‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏ñ‡πà‡∏≤‡∏¢</li>
                    </ul>
                </div>
                <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 8px;">
                    <h4>‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå:</h4>
                    <p>‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 95%</p>
                    <p>‚Ä¢ ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢ 60%</p>
                    <p>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô</p>
                    <p>‚Ä¢ ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå</p>
                </div>
            `
        },
        'drug': {
            title: '‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà',
            content: `
                <h3>AI ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏¢‡∏≤</h3>
                <div style="margin: 2rem 0;">
                    <h4>‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ AI:</h4>
                    <ul style="margin-left: 2rem; margin-top: 1rem;">
                        <li>‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏•‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤</li>
                        <li>‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏•‡∏•‡πå</li>
                        <li>‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏à‡∏£‡∏¥‡∏á</li>
                        <li>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà</li>
                    </ul>
                </div>
                <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 8px;">
                    <h4>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</h4>
                    <p>‚Ä¢ ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏¢‡∏≤‡∏à‡∏≤‡∏Å 10-15 ‡∏õ‡∏µ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 3-5 ‡∏õ‡∏µ</p>
                    <p>‚Ä¢ ‡∏•‡∏î‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢ 70%</p>
                    <p>‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à 40%</p>
                    <p>‚Ä¢ ‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏¢‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏´‡∏≤‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô</p>
                </div>
            `
        },
        'surgery': {
            title: '‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå',
            content: `
                <h3>‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î</h3>
                <div style="margin: 2rem 0;">
                    <h4>‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ:</h4>
                    <ul style="margin-left: 2rem; margin-top: 1rem;">
                        <li>‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå Da Vinci System</li>
                        <li>‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI</li>
                        <li>‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö Real-time</li>
                        <li>‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏ô‡∏Å‡∏£‡∏≠‡∏á tremor</li>
                    </ul>
                </div>
                <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 8px;">
                    <h4>‡∏Ç‡πâ‡∏≠‡∏î‡∏µ:</h4>
                    <p>‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏¥‡∏•‡∏•‡∏¥‡πÄ‡∏°‡∏ï‡∏£</p>
                    <p>‚Ä¢ ‡∏£‡∏≠‡∏¢‡πÅ‡∏ú‡∏•‡πÄ‡∏•‡πá‡∏Å (Minimally Invasive)</p>
                    <p>‚Ä¢ ‡∏•‡∏î‡∏†‡∏≤‡∏ß‡∏∞‡πÅ‡∏ó‡∏£‡∏Å‡∏ã‡πâ‡∏≠‡∏ô 35%</p>
                    <p>‚Ä¢ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ü‡∏∑‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 50%</p>
                </div>
            `
        },
        'personalized': {
            title: '‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•',
            content: `
                <h3>Personalized Medicine ‡∏î‡πâ‡∏ß‡∏¢ AI</h3>
                <div style="margin: 2rem 0;">
                    <h4>‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:</h4>
                    <ul style="margin-left: 2rem; margin-top: 1rem;">
                        <li>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡∏Å‡∏£‡∏£‡∏° (Genomics)</li>
                        <li>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤</li>
                        <li>‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°</li>
                        <li>‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏¢‡∏≤</li>
                    </ul>
                </div>
                <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 8px;">
                    <h4>‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ:</h4>
                    <p>‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á</p>
                    <p>‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏£‡∏Ñ</p>
                    <p>‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</p>
                    <p>‚Ä¢ ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏£‡∏Ñ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</p>
                </div>
            `
        },
        'telemedicine': {
            title: '‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏≤‡∏á‡πÑ‡∏Å‡∏•',
            content: `
                <h3>AI ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Telemedicine</h3>
                <div style="margin: 2rem 0;">
                    <h4>‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ AI:</h4>
                    <ul style="margin-left: 2rem; margin-top: 1rem;">
                        <li>Chatbots ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô</li>
                        <li>‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö Real-time</li>
                        <li>‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á</li>
                        <li>‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢</li>
                    </ul>
                </div>
                <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 8px;">
                    <h4>‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå:</h4>
                    <p>‚Ä¢ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÑ‡∏î‡πâ 24/7</p>
                    <p>‚Ä¢ ‡∏•‡∏î‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ 40%</p>
                    <p>‚Ä¢ ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏£‡πà‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÇ‡∏£‡∏Ñ</p>
                    <p>‚Ä¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡πà‡∏≤‡∏á‡πÑ‡∏Å‡∏•</p>
                </div>
            `
        },
        'predictive': {
            title: '‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏£‡∏Ñ',
            content: `
                <h3>AI Predictive Analytics</h3>
                <div style="margin: 2rem 0;">
                    <h4>‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:</h4>
                    <ul style="margin-left: 2rem; margin-top: 1rem;">
                        <li>‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï</li>
                        <li>‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï</li>
                        <li>‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á</li>
                        <li>‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ</li>
                    </ul>
                </div>
                <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 8px;">
                    <h4>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</h4>
                    <p>‚Ä¢ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 5 ‡∏õ‡∏µ</p>
                    <p>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô</p>
                    <p>‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤</p>
                    <p>‚Ä¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</p>
                </div>
            `
        }
    };
    
    const demo = demoContent[category];
    if (demo) {
        modalBody.innerHTML = demo.content;
        modal.style.display = 'block';
    }
}

function closeModal() {
    document.getElementById('demo-modal').style.display = 'none';
}

// Mobile navigation toggle
function initMobileNav() {
    const navToggle = document.querySelector('.nav-toggle');
    const navMenu = document.querySelector('.nav-menu');
    
    if (navToggle) {
        navToggle.addEventListener('click', () => {
            navMenu.style.display = navMenu.style.display === 'flex' ? 'none' : 'flex';
        });
    }
}

// Intersection Observer for animations
function initScrollAnimations() {
    const elements = document.querySelectorAll('.app-card, .demo-card, .api-card, .edu-card');
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    });
    
    elements.forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(20px)';
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(el);
    });
}

// Initialize everything when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    initStatsAnimation();
    initDemoTabs();
    initCodeTabs();
    initMobileNav();
    initScrollAnimations();
    
    // Close modal when clicking outside
    window.addEventListener('click', function(event) {
        const modal = document.getElementById('demo-modal');
        if (event.target === modal) {
            closeModal();
        }
    });
    
    // Smooth scrolling for navigation links
    document.querySelectorAll('.nav-link').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href').substring(1);
            scrollToSection(targetId);
        });
    });
    
    // Add loading states to demo buttons
    document.querySelectorAll('.demo-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const icon = this.querySelector('i');
            const originalClass = icon.className;
            icon.className = 'fas fa-spinner fa-spin';
            
            setTimeout(() => {
                icon.className = originalClass;
            }, 2000);
        });
    });
});

// Utility functions
function showLoading(elementId) {
    const element = document.getElementById(elementId);
    element.innerHTML = '<div style="text-align: center;"><div class="loading"></div> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...</div>';
}

function hideLoading(elementId) {
    const element = document.getElementById(elementId);
    element.innerHTML = '';
}

// Export functions for potential external use
window.MedicalAI = {
    scrollToSection,
    checkSymptoms,
    calculateBMI,
    analyzeHeartRate,
    searchDrug,
    openDemo,
    closeModal
};